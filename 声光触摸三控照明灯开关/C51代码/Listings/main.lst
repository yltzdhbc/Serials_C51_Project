C51 COMPILER V9.60.0.0   MAIN                                                              03/28/2020 23:23:16 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /**************************************功能说明*************************************
   2          *
   3          * 因为需要用到ADC 而stc89c51系列没有内置ADC 因此选用了STC15F2K60S2
   4          * 该芯片和STC89C51引脚外观都完全一致 不同的是内部资源 可以替换c51
   5          *
   6          * 声音传感器使用的是开关量 接入单片机的一个引脚 有声音的时候值为0
   7          * 光线传感器经过电路处理之后 是一个连续的模拟量 用ADC 通道0来捕获
   8          * 触摸传感器是一个金属片经过300KZH的脉冲信号之后产生的震荡 当人体
   9          * 摸到金属片之后电容改变 另一端的电压继而改变 用ADC通道1捕获
  10          * ADC的值经过转化得到连续值 与TouchZero进行比较判断触发或者未触发
  11          *  
  12          * MainHandle函数里面进行逻辑判断
  13          *
  14          * STC15F2K60S2的ADC做电容感应触摸键.
  15          * 芯片的工作频率为24MHz
  16          *
  17          ***********************************************************************************/
  18          
  19          #include <reg52.h>
  20          #include <intrins.h>
  21          
  22          #define MAIN_Fosc 24000000UL //定义主时钟频率 24M
  23          
  24          typedef unsigned char u8;
  25          typedef unsigned int u16;
  26          typedef unsigned long u32;
  27          
  28          #define Timer0_Reload (65536UL - (MAIN_Fosc / 600000)) //Timer 0 重装值 产生300KHZ的波 用于震荡导电片
  29          
  30          sfr P1ASF = 0x9D;   //只写，模拟输入选择
  31          sfr ADC_CONTR = 0xBC; //带AD系列
  32          sfr ADC_RES = 0xBD;   //带AD系列
  33          sfr ADC_RESL = 0xBE;  //带AD系列
  34          sfr AUXR = 0x8E;
  35          sfr AUXR2 = 0x8F;
  36          
  37          /*************  本地常量声明  **************/
  38          
  39          #define TOUCH_CHANNEL 2 //ADC通道数
  40          
  41          #define ADC_90T (3 << 5)   //ADC时间 90T
  42          #define ADC_180T (2 << 5)  //ADC时间 180T
  43          #define ADC_360T (1 << 5)  //ADC时间 360T
  44          #define ADC_540T 0       //ADC时间 540T
  45          #define ADC_FLAG (1 << 4)  //软件清0
  46          #define ADC_START (1 << 3) //自动清0
  47          
  48          /*************  本地变量声明  **************/
  49          
  50          sbit P_LED = P2 ^ 4;   //LED接口
  51          sbit P_SOUND = P2 ^ 7; //声音传感器接口
  52          sbit P_LIGHT = P2 ^ 6; //光敏电阻接口
  53          sbit P_TOUCH = P2 ^ 5; //触摸传感器接口
  54          
C51 COMPILER V9.60.0.0   MAIN                                                              03/28/2020 23:23:16 PAGE 2   

  55          u16 idata adc[TOUCH_CHANNEL];     //当前ADC值
  56          u16 idata adc_prev[TOUCH_CHANNEL];    //上一个ADC值
  57          u16 idata TouchZero[TOUCH_CHANNEL];   //0点ADC值
  58          u8 idata TouchZeroCnt[TOUCH_CHANNEL]; //0点自动跟踪计数
  59          
  60          u16 Counter1;      //定时器1计数
  61          u16 timerPeriod1 = 10000; //2000ms
  62          u8 cnt_250ms;      //250ms 一个周期的周期计数
  63          
  64          u8 touch_button_state = 0; //触摸按键的状态 0未触发  1触发
  65          u8 light_sensor_state = 0; //光线传感器的状态 0未触发  1触发
  66          u8 voice_sensor_state = 0; //声音传感器的状态 0未触发  1触发
  67          
  68          /*************  本地函数声明  **************/
  69          void delay_ms(u8 ms);
  70          void ADC_init(void);
  71          u16 Get_ADC10bitResult(u8 channel);
  72          void AutoZero(void);
  73          u8 check_adc(u8 index);
  74          void MainHandle(void);
  75          
  76          /******************** 主函数 **************************/
  77          void main(void)
  78          {
  79   1        //u8 i;
  80   1      
  81   1        delay_ms(50);
  82   1      
  83   1        ET0 = 0; //初始化Timer0输出一个300KHZ时钟
  84   1        TR0 = 0;
  85   1        AUXR |= 0x80;  //Timer0 set as 1T mode
  86   1        AUXR2 |= 0x01; //允许输出时钟
  87   1        TMOD = 0;    //Timer0 set as Timer, 16 bits Auto Reload.
  88   1        TH0 = (u8)(Timer0_Reload >> 8);
  89   1        TL0 = (u8)Timer0_Reload;
  90   1        TR0 = 1;
  91   1      
  92   1        TH1 = (65536 - 1000) / 256; // 设置定时器1定时时间1ms
  93   1        TH1 = (65536 - 1000) % 256;
  94   1        TR1 = 1; // 设置控制寄存器：启动定时器1
  95   1        ET1 = 0; // 设置中断允许寄存器
  96   1        EA = 1;
  97   1      
  98   1        //ADC_init();   //ADC初始化
  99   1        delay_ms(50); //延时50ms
 100   1      
 101   1        //通道0 被用来检测光敏电阻的电阻值 TouchZero 改变灵敏度
 102   1        adc_prev[0] = 1023;
 103   1        TouchZero[0] = 1023;
 104   1        TouchZeroCnt[0] = 0;
 105   1        //通道1 被用来检测光敏电阻的电阻值 TouchZero 改变灵敏度
 106   1        adc_prev[1] = 1023;
 107   1        TouchZero[1] = 1023;
 108   1        TouchZeroCnt[1] = 0;
 109   1      
 110   1        cnt_250ms = 0;
 111   1      
 112   1        while (1)
 113   1        {
 114   2          delay_ms(1); //每隔50ms处理一次按键
 115   2          MainHandle(); //主处理函数 逻辑部分在这里处理
 116   2      //    if (++cnt_250ms >= 5)
C51 COMPILER V9.60.0.0   MAIN                                                              03/28/2020 23:23:16 PAGE 3   

 117   2      //    {
 118   2      //      cnt_250ms = 0;
 119   2      //      AutoZero(); //每隔250ms处理一次0点自动跟踪
 120   2      //    }
 121   2        }
 122   1      }
 123          /**********************************************/
 124          
 125          //========================================================================
 126          // 函数: void  delay_ms(unsigned char ms)
 127          // 描述: 延时函数。
 128          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
 129          // 返回: none.
 130          // 版本: VER1.0
 131          // 日期: 2013-4-1
 132          // 备注:
 133          //========================================================================
 134          void delay_ms(u8 ms)
 135          {
 136   1        unsigned int i;
 137   1        do
 138   1        {
 139   2          i = MAIN_Fosc / 13000;
 140   2          while (--i)
 141   2            ;
 142   2        } while (--ms);
 143   1      }
 144          
 145          /*************  ADC初始化函数 *****************/
 146          void ADC_init(void)
 147          {
 148   1        P1ASF = 0xff;   //8路ADC
 149   1        ADC_CONTR = 0x80; //允许ADC
 150   1      }
 151          
 152          //========================================================================
 153          // 函数: u16  Get_ADC10bitResult(u8 channel)
 154          // 描述: 查询法读一次ADC结果.
 155          // 参数: channel: 选择要转换的ADC.
 156          // 返回: 10位ADC结果.
 157          // 版本: V1.0, 2012-10-22
 158          //========================================================================
 159          u16 Get_ADC10bitResult(u8 channel) //channel = 0~7
 160          {
 161   1        ADC_RES = 0;
 162   1        ADC_RESL = 0;
 163   1        ADC_CONTR = 0x80 | ADC_90T | ADC_START | channel; //触发ADC
 164   1        _nop_();
 165   1        _nop_();
 166   1        _nop_();
 167   1        _nop_();
 168   1        while ((ADC_CONTR & ADC_FLAG) == 0)
 169   1          ;                       //等待ADC转换结束
 170   1        ADC_CONTR = 0x80;                 //清除标志
 171   1        return (((u16)ADC_RES << 2) | ((u16)ADC_RESL & 3)); //返回ADC结果
 172   1      }
 173          
 174          /********************* 自动0点跟踪函数 *************************/
 175          void AutoZero(void) //250ms调用一次 这是使用相邻2个采样的差的绝对值之和来检测。
 176          {
 177   1        u8 i;
 178   1        u16 j, k;
C51 COMPILER V9.60.0.0   MAIN                                                              03/28/2020 23:23:16 PAGE 4   

 179   1      
 180   1        for (i = 0; i < TOUCH_CHANNEL; i++) //处理8个通道
 181   1        {
 182   2          j = adc[i];
 183   2          k = j - adc_prev[i]; //减前一个读数
 184   2          F0 = 0;        //按下
 185   2          if (k & 0x8000)
 186   2            F0 = 1, k = 0 - k; //释放 求出两次采样的差值
 187   2          if (k >= 20)       //变化比较大
 188   2          {
 189   3            TouchZeroCnt[i] = 0; //如果变化比较大，则清0计数器
 190   3            if (F0)
 191   3              TouchZero[i] = j; //如果是释放，并且变化比较大，则直接替代
 192   3          }
 193   2          else //变化比较小，则蠕动，自动0点跟踪
 194   2          {
 195   3            if (++TouchZeroCnt[i] >= 20) //连续检测到小变化20次/4 = 5秒.
 196   3            {
 197   4              TouchZeroCnt[i] = 0;
 198   4              TouchZero[i] = adc_prev[i]; //变化缓慢的值作为0点
 199   4            }
 200   3          }
 201   2          adc_prev[i] = j; //保存这一次的采样值
 202   2        }
 203   1      }
 204          
 205          /********************* 获取触摸信息函数 50ms调用1次 *************************/
 206          u8 check_adc(u8 index) //判断键按下或释放,有回差控制
 207          {
 208   1        u16 delta;
 209   1        adc[index] = 1023 - Get_ADC10bitResult(index); //获取ADC值, 转成按下键, ADC值增加
 210   1        if (adc[index] < TouchZero[index])
 211   1          return 0; //比0点还小的值，则认为是键释放
 212   1        delta = adc[index] - TouchZero[index];
 213   1        if (delta >= 40)
 214   1          return 1; //键按下
 215   1        if (delta <= 20)
 216   1          return 0; //键释放
 217   1        return 2;   //保持原状态
 218   1      }
 219          
 220          /********************* 键处理 50ms调用1次 *************************/
 221          void MainHandle(void)
 222          {
 223   1      /*进行逻辑判断*/
 224   1      if (P_LIGHT == 1) //当没有光照的时候
 225   1      {
 226   2        if (P_SOUND == 0) //有声音
 227   2        {
 228   3          //timerPeriod1 = 2000; //自动触发的时候 灯亮2S
 229   3          P_LED = 0;       //开灯
 230   3          ET1 = 1;       //开启定时器1 延时2S
 231   3        }
 232   2      }
 233   1      else //当有光照的时候
 234   1      {
 235   2        //无论有无声响都不点亮
 236   2      }
 237   1      
 238   1      if (P_TOUCH == 1) //只要触摸传感器触发
 239   1      {
 240   2        //timerPeriod1 = 10000; //触摸开关触发 灯亮4S
C51 COMPILER V9.60.0.0   MAIN                                                              03/28/2020 23:23:16 PAGE 5   

 241   2        P_LED = 0;       //开灯
 242   2        ET1 = 1;       //开启定时器1 中断允许寄存器
 243   2      }
 244   1        
 245   1      ////  i = check_adc(0);
 246   1      //  i = P_TOUCH;
 247   1      //  if (i == 0)
 248   1      //    touch_button_state = 0; //触摸按键的状态 0未触发  1触发
 249   1      //  if (i == 1)
 250   1      //    touch_button_state = 1; //触摸按键的状态 0未触发  1触发
 251   1      
 252   1      ////  i = check_adc(1);
 253   1      //  i = P_LIGHT;
 254   1      //  if (i == 0)
 255   1      //    light_sensor_state = 0; //光线传感器的状态 0未触发  1触发
 256   1      //  if (i == 1)
 257   1      //    light_sensor_state = 1; //光线传感器的状态 0未触发  1触发
 258   1      
 259   1      //  if (P_SOUND == 0)
 260   1      //    voice_sensor_state = 1; //声音传感器的状态 0未触发  1触发
 261   1      //  if (P_SOUND == 1)
 262   1      //    voice_sensor_state = 0; //声音传感器的状态 0未触发  1触发
 263   1      
 264   1      //  /*进行逻辑判断*/
 265   1      //  if (light_sensor_state == 0) //当没有光照的时候
 266   1      //  {
 267   1      //    if (voice_sensor_state == 1) //有声音
 268   1      //    {
 269   1      //      timerPeriod1 = 2000; //自动触发的时候 灯亮2S
 270   1      //      P_LED = 0;       //开灯
 271   1      //      ET1 = 1;       //开启定时器1 延时2S
 272   1      //    }
 273   1      //  }
 274   1      //  else //当有光照的时候
 275   1      //  {
 276   1      //    //无论有无声响都不点亮
 277   1      //  }
 278   1      
 279   1      //  if (touch_button_state == 1) //只要触摸传感器触发
 280   1      //  {
 281   1      //    timerPeriod1 = 4000; //触摸开关触发 灯亮4S
 282   1      //    P_LED = 0;       //开灯
 283   1      //    ET1 = 1;       //开启定时器1 中断允许寄存器
 284   1      //  }
 285   1      }
 286          
 287          void Timer1() interrupt 3 //定时器1中断
 288          {
 289   1        TH1 = (65536 - 1000) / 256;
 290   1        TL1 = (65536 - 1000) % 256;
 291   1        Counter1++;
 292   1        if (Counter1 == timerPeriod1)
 293   1        {
 294   2          Counter1 = 0;
 295   2          P_LED = 1; //把灯关掉
 296   2          ET1 = 0;   //定时时间到触发一次 之后关掉定时器 等下一次开启
 297   2        }
 298   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    502    ----
C51 COMPILER V9.60.0.0   MAIN                                                              03/28/2020 23:23:16 PAGE 6   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     14    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
